open Externc
open Scheduler_data
node slp_aux(sa : Scheduler_data.select_acc; proc : int;
              acc : Scheduler_data.aux_type)
returns (o : Scheduler_data.aux_type)
var v : bool; v_1 : Scheduler_data.aux_type;
let
  o = if v then v_1 else acc;
  v_1 =
    { Scheduler_data.sel_proc = 
      proc;
      Scheduler_data.sel_period = 
      sa.Scheduler_data.speriod };
  v = (acc.Scheduler_data.sel_period < sa.Scheduler_data.speriod)
tel

node select_largest_period(acc : Scheduler_data.select_acc^Scheduler_data.nproc)
returns (lp : int)
var search_result : Scheduler_data.aux_type; v : Scheduler_data.select_acc;
    v_2 : Scheduler_data.aux_type;
let
  lp = search_result.Scheduler_data.sel_proc;
  search_result = (foldi (slp_aux())<<Scheduler_data.nproc>>)(())(acc, v_2);
  v_2 =
    { Scheduler_data.sel_proc = 
      0;
      Scheduler_data.sel_period = 
      v.Scheduler_data.speriod };
  v = acc[0]
tel

node update_proc(i : int; select_task : int; ts : Scheduler_data.task_status;
                  select_tp : int)
returns (o : int)
var v : bool; v_3 : bool; v_4 : bool;
let
  o = if v_4 then select_task else select_tp;
  v_4 = (v & v_3);
  v_3 = (ts.Scheduler_data.current_proc = i);
  v = (ts.Scheduler_data.status = Scheduler_data.Running)
tel

node proc_task(ts : Scheduler_data.task_status; t_index : int;
                tp_acc : int^Scheduler_data.nproc)
returns (o : int^Scheduler_data.nproc)
var v : bool; v_5 : int^Scheduler_data.nproc;
let
  o = if v then v_5 else tp_acc;
  v_5 = (tp_acc with [ts.Scheduler_data.current_proc] = t_index);
  v = (ts.Scheduler_data.status = Scheduler_data.Running)
tel

node extract_proc(ts : Scheduler_data.task_status^Scheduler_data.ntasks)
returns (o : int^Scheduler_data.nproc)
var init_proc : int^Scheduler_data.nproc;
let
  o = (foldi (proc_task())<<Scheduler_data.ntasks>>)(())(ts, init_proc);
  init_proc = Scheduler_data.ntasks^Scheduler_data.nproc
tel

node complete(tasks_map : Scheduler_data.task_status; task_end : bool)
returns (o : Scheduler_data.task_status)
var v : bool; v_6 : Scheduler_data.task_status;
    v_7 : Scheduler_data.task_status; v_8 : Scheduler_data.task_status;
let
  o = if v then v_8 else tasks_map;
  v_8 = if task_end then v_6 else v_7;
  v_7 =
    { Scheduler_data.status = 
      Scheduler_data.Ready;
      Scheduler_data.current_proc = 
      tasks_map.Scheduler_data.current_proc;
      Scheduler_data.current_deadline = 
      tasks_map.Scheduler_data.current_deadline };
  v_6 = {tasks_map with .Scheduler_data.status = Scheduler_data.Waiting};
  v = (tasks_map.Scheduler_data.status = Scheduler_data.Running)
tel

node check_deadline(current_date : int; tsi : Scheduler_data.task_status;
                     tid : int)
returns (tso : Scheduler_data.task_status)
var c : bool; v : bool; v_9 : bool; v_10 : Scheduler_data.task_status;
let
  tso = if c then v_10 else tsi;
  v_10 = {tsi with .Scheduler_data.status = Scheduler_data.Waiting};
  () =
    Externc.deadline_miss_log
    ((current_date when true(c)), (tid when true(c)));
  c = (v & v_9);
  v_9 = (tsi.Scheduler_data.current_deadline = current_date);
  v = (tsi.Scheduler_data.status = Scheduler_data.Ready)
tel

node start_inst(current_date : int; tsi : Scheduler_data.task_status;
                 ta : Scheduler_data.task_attributes)
returns (tso : Scheduler_data.task_status)
var c : bool; v : int; v_11 : int; v_12 : int;
    v_13 : Scheduler_data.task_status;
let
  tso = merge c (true -> v_13)(false -> (tsi when false(c)));
  v_13 =
    { Scheduler_data.status = 
      Scheduler_data.Ready;
      Scheduler_data.current_proc = 
      (tsi.Scheduler_data.current_proc when true(c));
      Scheduler_data.current_deadline = 
      v_12 };
  v_12 =
    ((current_date when true(c)) + (ta.Scheduler_data.deadline when true(c)));
  c = (v_11 = 0);
  v_11 = (v % ta.Scheduler_data.period);
  v = (current_date - ta.Scheduler_data.first_start)
tel

node select_aux(ts : Scheduler_data.task_status;
                 ta : Scheduler_data.task_attributes; tid : int;
                 acc : Scheduler_data.select_acc^Scheduler_data.nproc)
returns (acc_o : Scheduler_data.select_acc^Scheduler_data.nproc)
var lp : int; v : bool; v_14 : bool; v_15 : Scheduler_data.select_acc;
    v_16 : Scheduler_data.select_acc^Scheduler_data.nproc;
    v_17 : Scheduler_data.select_acc^Scheduler_data.nproc;
let
  acc_o = if v then v_17 else acc;
  v_17 = if v_14 then v_16 else acc;
  v_16 = (acc with [lp] = v_15);
  v_15 =
    { Scheduler_data.tid = 
      tid;
      Scheduler_data.speriod = 
      ta.Scheduler_data.period };
  v_14 = (ta.Scheduler_data.period < lp);
  v = (ts.Scheduler_data.status = Scheduler_data.Ready);
  lp = select_largest_period(acc)
tel

node select_tid(s : Scheduler_data.select_acc) returns (o : int)
let
  o = s.Scheduler_data.tid
tel

node select_tasks(ts : Scheduler_data.task_status^Scheduler_data.ntasks)
returns (selected : int^Scheduler_data.nproc)
var tmp : Scheduler_data.select_acc^Scheduler_data.nproc;
    v : Scheduler_data.select_acc^Scheduler_data.nproc;
let
  selected = (map (select_tid())<<Scheduler_data.nproc>>)(())(tmp);
  tmp =
    (foldi (select_aux())<<Scheduler_data.ntasks>>)
      (())(ts, Scheduler_data.tasks, v);
  v =
    { Scheduler_data.tid = 
      Scheduler_data.ntasks;
      Scheduler_data.speriod = 
      Scheduler_data.int_max }^Scheduler_data.nproc
tel

node update_selected(ts : Scheduler_data.task_status;
                      selected : int^Scheduler_data.nproc; tid : int)
returns (tso : Scheduler_data.task_status)
var v : int^Scheduler_data.nproc; v_18 : bool^Scheduler_data.nproc;
    v_19 : bool; v_20 : Scheduler_data.task_status;
let
  tso = if v_19 then v_20 else ts;
  v_20 = {ts with .Scheduler_data.status = Scheduler_data.Running};
  v_19 = (fold ((or)())<<Scheduler_data.nproc>>)(())(v_18, false);
  v_18 = (map ((=)())<<Scheduler_data.nproc>>)(())(selected, v);
  v = tid^Scheduler_data.nproc
tel

node rate_monotonic_mc(ts : Scheduler_data.task_status^Scheduler_data.ntasks)
returns (tso : Scheduler_data.task_status^Scheduler_data.ntasks)
var selected : int^Scheduler_data.nproc;
    v : int^Scheduler_data.nproc^Scheduler_data.ntasks;
let
  tso = (mapi (update_selected())<<Scheduler_data.ntasks>>)(())(ts, v);
  v = selected^Scheduler_data.ntasks;
  selected = select_tasks(ts)
tel

node scheduler(task_end : bool^Scheduler_data.ntasks)
returns (task_run : int^Scheduler_data.nproc)
var tmp4 : Scheduler_data.task_status^Scheduler_data.ntasks;
    tmp3 : Scheduler_data.task_status^Scheduler_data.ntasks;
    tmp2 : Scheduler_data.task_status^Scheduler_data.ntasks;
    tmp1 : Scheduler_data.task_status^Scheduler_data.ntasks; new_date : int;
    ss : Scheduler_data.scheduler_state; v : Scheduler_data.scheduler_state;
    v_21 : int^Scheduler_data.ntasks; v_22 : int^Scheduler_data.ntasks;
let
  task_run = extract_proc(tmp4);
  tmp4 = rate_monotonic_mc(tmp3);
  tmp3 =
    (map (start_inst())<<Scheduler_data.ntasks>>)
      (())(v_22, tmp2, Scheduler_data.tasks);
  v_22 = new_date^Scheduler_data.ntasks;
  tmp2 = (mapi (check_deadline())<<Scheduler_data.ntasks>>)(())(v_21, tmp1);
  v_21 = new_date^Scheduler_data.ntasks;
  tmp1 =
    (map (complete())<<Scheduler_data.ntasks>>)
      (())(ss.Scheduler_data.tasks, task_end);
  new_date = (ss.Scheduler_data.current_date + 1);
  ss = Scheduler_data.init_sstate fby v;
  v = { Scheduler_data.current_date = new_date; Scheduler_data.tasks = tmp4 }
tel

